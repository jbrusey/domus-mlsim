#+title: DOMUS ML-Simulator
#+author: James Brusey
* Introduction
This is an interface to machine learned simulators written in Python developed as part of the H2020 EU DOMUS project http://domus-project.eu 

* Example
To see how to use the simulator, go to the [[https://github.com/jbrusey/domus_mlsim/blob/main/example.ipynb][example]]. 
* Installation
** Installing using pip
I recommend installing in a virtualenv or using Anaconda. You'll need to set-up and switch to the virtualenv first and then install using:
#+BEGIN_SRC sh
pip install -e .
#+END_SRC
The ~-e~ switch is used so that the files are installed pointing back to the current directory, which helps if you update the repository later on. This should install all pre-requisites but you may need to separately install jupyter if you want to use that. 
** Installing under anaconda or miniconda
The simplest way to install is first install miniconda https://docs.conda.io/en/latest/miniconda.html or Anaconda https://www.anaconda.com/products/individual and then use the command line as follows:
#+BEGIN_SRC sh
conda env create -f ml.yml
#+END_SRC
This will create a conda environment called ~ml~ that can be activated using:
#+BEGIN_SRC sh
conda activate ml
#+END_SRC

* Updating the install
After =git pull= and particularly if ~ml.yml~ got updated, you can update the installed packages using:
#+BEGIN_SRC sh
conda env update -n ml -f ml.yml
#+END_SRC

* Testing your installation
To ensure that you have everything installed ok, use:
#+BEGIN_SRC sh
python -m pytest
#+END_SRC
If this produces errors, it may indicate that you are missing some packages or haven't activated the conda environment.

** Notes

1. =pytest= command does not include the current directory in PYTHONPATH. Make sure you use the =python -m pytest= form.

